// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitter, PostOffice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  PostOffice = (function(_super) {
    __extends(PostOffice, _super);

    PostOffice.prototype.target = null;

    PostOffice.prototype.origin = null;

    function PostOffice(target, origin) {
      if (origin == null) {
        origin = '*';
      }
      this.handleMessage = __bind(this.handleMessage, this);
      if (!(this instanceof PostOffice)) {
        return new PostOffice(target, origin);
      }
      PostOffice.__super__.constructor.call(this);
      this.target = target;
      this.origin = origin;
      this.listen();
    }

    /*
    Sends a package over channel.
    
    - `channel` (String): The channel to send the package over
    - `pkg...` (Array...): The package to send. It will take any arguments after the first,
      stick them in a JSON array and then on the other end call the callback
      with those arguments applied to the callback.
    
    Returns the result of the postMessage call.
    */


    PostOffice.prototype.post = function() {
      var channel, packed, pkg;
      channel = arguments[0], pkg = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      packed = this.pack(channel, pkg);
      return this.target.postMessage(packed, this.origin);
    };

    /*
    Sets up the postMessage handler
    */


    PostOffice.prototype.listen = function() {
      if (window.addEventListener) {
        return window.addEventListener('message', this.handleMessage);
      } else {
        return window.attachEvent('onmessage', this.handleMessage);
      }
    };

    /*
    Handles a postmessage event. Attempt to unpack it, and if we can emit an
    event.
    
    - `event` (Event): The event to handle.
    */


    PostOffice.prototype.handleMessage = function(event) {
      var unpackaged;
      if (unpackaged = this.unpack(event.data)) {
        return this.emit.apply(this, [unpackaged.channel].concat(__slice.call(unpackaged["package"])));
      }
    };

    /*
    Takes a string from a postmessage event and tries to unpack it. If it is
    successful it will return the unpacked object, otherwise it will return
    false.
    
    - `data` (String): The data to attempt to unpack.
    
    Returns the unpacked data as an Object, or `false`.
    */


    PostOffice.prototype.unpack = function(data) {
      var error, pkg;
      try {
        pkg = JSON.parse(data);
        return {
          channel: pkg._postie.channel,
          "package": pkg._postie["package"]
        };
      } catch (_error) {
        error = _error;
        return false;
      }
    };

    /*
    Packs a channel string and a package to send into a String that we can send
    over postMessage to be unpacked on the other side.
    
    - `channel` (String): The channel the package is being sent on.
    - `pkg` (Mixed): The package to pack with the channel into the string.
    
    Returns a String which can be unpacked into its old representation via
    `@unpack()`.
    */


    PostOffice.prototype.pack = function(channel, pkg) {
      return JSON.stringify({
        _postie: {
          channel: channel,
          "package": pkg
        }
      });
    };

    return PostOffice;

  })(EventEmitter);

  module.exports = PostOffice;

}).call(this);
